const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const overlay = document.getElementById('overlay');
const statusDiv = document.getElementById('status');
const verifyBtn = document.getElementById('verifyBtn');
const startLivenessBtn = document.getElementById('startLivenessBtn');

let stream = null;
let isLivenessCheckPassed = false;
let blinkCount = 0;
let headMovements = 0;
let smileDetected = false;

function showStatus(msg, type) {
  statusDiv.textContent = msg;
  statusDiv.className = 'status ' + (type || '');
}

async function loadModels() {
  showStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•...', '');
  // Force CPU backend
  if (faceapi.tf && faceapi.tf.setBackend) {
    await faceapi.tf.setBackend('cpu');
    await faceapi.tf.ready();
  }
  await faceapi.nets.tinyFaceDetector.loadFromUri('/models');
  await faceapi.nets.faceLandmark68Net.loadFromUri('/models');
  await faceapi.nets.faceRecognitionNet.loadFromUri('/models');
  await faceapi.nets.faceExpressionNet.loadFromUri('/models');
  showStatus('‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

async function startCamera() {
  stream = await navigator.mediaDevices.getUserMedia({ video: true });
  video.srcObject = stream;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô euclideanDistance ‡πÄ‡∏≠‡∏á
function customEuclideanDistance(point1, point2) {
  const dx = point1.x - point2.x;
  const dy = point1.y - point2.y;
  return Math.sqrt(dx * dx + dy * dy);
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EAR (Eye Aspect Ratio) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤
function calculateEAR(eye) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ eye landmarks ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!eye || eye.length < 6) {
    console.log('EAR Calculation: Invalid eye landmarks', eye);
    return 0;
  }
  
  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î landmarks ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤
  console.log('Eye landmarks:', eye.map((point, index) => `Point ${index}: (${point.x}, ${point.y})`));
  
  const A = customEuclideanDistance(eye[1], eye[5]);
  const B = customEuclideanDistance(eye[2], eye[4]);
  const C = customEuclideanDistance(eye[0], eye[3]);
  
  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ A, B, C ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  console.log('EAR Calculation Raw:', { A, B, C });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ C ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ NaN
  if (C === 0 || isNaN(C)) {
    console.log('EAR Calculation: C is zero or NaN', { A, B, C });
    return 0;
  }
  
  const ear = (A + B) / (2.0 * C);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ EAR ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô NaN
  if (isNaN(ear)) {
    console.log('EAR Calculation: Result is NaN', { A, B, C, ear });
    return 0;
  }
  
  console.log('EAR Calculation:', { A: A.toFixed(4), B: B.toFixed(4), C: C.toFixed(4), EAR: ear.toFixed(4) });
  return ear;
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤
function detectBlink(landmarks) {
  const leftEye = landmarks.getLeftEye();
  const rightEye = landmarks.getRightEye();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ landmarks ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!leftEye || !rightEye || leftEye.length < 6 || rightEye.length < 6) {
    console.log('Blink Detection: Invalid eye landmarks', { leftEye, rightEye });
    return false;
  }
  
  const leftEAR = calculateEAR(leftEye);
  const rightEAR = calculateEAR(rightEye);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ EAR ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (leftEAR === 0 || rightEAR === 0) {
    console.log('Blink Detection: Invalid EAR values', { leftEAR, rightEAR });
    return false;
  }
  
  const avgEAR = (leftEAR + rightEAR) / 2.0;
  const EAR_THRESHOLD = 0.32; // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
  
  const isBlinking = avgEAR < EAR_THRESHOLD;
  console.log('Blink Detection:', {
    leftEAR: leftEAR.toFixed(4),
    rightEAR: rightEAR.toFixed(4),
    avgEAR: avgEAR.toFixed(4),
    threshold: EAR_THRESHOLD,
    isBlinking: isBlinking
  });
  
  return isBlinking;
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡πâ‡∏°
function detectSmile(expressions) {
  const happyScore = expressions.happy;
  const threshold = 0.1; // ‡∏•‡∏î threshold ‡∏à‡∏≤‡∏Å 0.7 ‡πÄ‡∏õ‡πá‡∏ô 0.1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
  
  const isSmiling = happyScore > threshold;
  
  console.log('Smile Detection:', {
    happyScore: happyScore.toFixed(4),
    threshold: threshold,
    isSmiling: isSmiling,
    allExpressions: {
      neutral: expressions.neutral.toFixed(4),
      happy: expressions.happy.toFixed(4),
      sad: expressions.sad.toFixed(4),
      angry: expressions.angry.toFixed(4),
      fearful: expressions.fearful.toFixed(4),
      disgusted: expressions.disgusted.toFixed(4),
      surprised: expressions.surprised.toFixed(4)
    }
  });
  
  return isSmiling;
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏®‡∏µ‡∏£‡∏©‡∏∞
let lastHeadPosition = null;
function detectHeadMovement(landmarks) {
  const nose = landmarks.getNose()[3]; // ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏°‡∏π‡∏Å
  
  if (lastHeadPosition) {
    const distance = customEuclideanDistance(nose, lastHeadPosition);
    const threshold = 15; // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 15 pixels ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏±‡∏ö‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    const isMoving = distance > threshold;
    
    console.log('Head Movement Detection:', {
      currentNose: { x: nose.x.toFixed(2), y: nose.y.toFixed(2) },
      lastNose: { x: lastHeadPosition.x.toFixed(2), y: lastHeadPosition.y.toFixed(2) },
      distance: distance.toFixed(4),
      threshold: threshold,
      isMoving: isMoving
    });
    
    if (isMoving) {
      lastHeadPosition = nose;
      return true;
    }
  } else {
    console.log('Head Movement Detection: First position set');
    lastHeadPosition = nose;
  }
  return false;
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Liveness
async function startLivenessCheck() {
  const studentId = document.getElementById('studentId').value;
  const firstName = document.getElementById('firstName').value;
  const lastName = document.getElementById('lastName').value;
  
  if (!studentId || !firstName || !lastName) {
    showStatus('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô', 'error');
    return;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
  showStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï...', '');
  try {
    const checkResponse = await fetch('http://localhost:3000/check-student', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        studentId,
        firstName,
        lastName
      })
    });
    
    const checkData = await checkResponse.json();
    if (!checkData.exists) {
      showStatus('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô', 'error');
      return;
    }
    
    showStatus('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Liveness...', 'success');
  } catch (error) {
    showStatus('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', 'error');
    return;
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Liveness Check
  setTimeout(() => {
    showStatus('üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏¢‡∏¥‡πâ‡∏° 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', '');
  }, 1000);
  
  setTimeout(() => {
    showStatus('üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏ß‡∏≤‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '');
  }, 3000);
  
  isLivenessCheckPassed = false;
  blinkCount = 0;
  headMovements = 0;
  smileDetected = false; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏™‡∏°‡∏≠
  lastHeadPosition = null;
  
  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î
  if (!stream) {
    await startCamera();
  }
  
  const checkInterval = setInterval(async () => {
    try {
      const detection = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
        .withFaceLandmarks()
        .withFaceExpressions();
      
      if (detection) {
        console.log('=== Liveness Check Cycle ===');
        console.log('Current Counts:', { blinkCount, headMovements, smileDetected });
        
        // Debug: ‡πÅ‡∏™‡∏î‡∏á landmarks structure
        console.log('Landmarks structure:', {
          leftEye: detection.landmarks.getLeftEye(),
          rightEye: detection.landmarks.getRightEye(),
          nose: detection.landmarks.getNose(),
          leftEyeLength: detection.landmarks.getLeftEye().length,
          rightEyeLength: detection.landmarks.getRightEye().length
        });
        
        // Test euclideanDistance function
        const testPoint1 = { x: 0, y: 0 };
        const testPoint2 = { x: 3, y: 4 };
        const testDistance = customEuclideanDistance(testPoint1, testPoint2);
        console.log('Test euclideanDistance:', { testPoint1, testPoint2, testDistance });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤
        const blinkDetected = detectBlink(detection.landmarks);
        if (blinkDetected) {
          blinkCount++;
          console.log('‚úÖ Blink detected! New count:', blinkCount);
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏®‡∏µ‡∏£‡∏©‡∏∞
        const headMovementDetected = detectHeadMovement(detection.landmarks);
        if (headMovementDetected) {
          headMovements++;
          console.log('‚úÖ Head movement detected! New count:', headMovements);
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡πâ‡∏°
        const smileDetectedNow = detectSmile(detection.expressions);
        console.log('Smile check:', { 
          smileDetectedNow, 
          smileDetected, 
          willUpdate: smileDetectedNow && !smileDetected 
        });
        if (smileDetectedNow && !smileDetected) {
          smileDetected = true;
          console.log('‚úÖ Smile detected!');
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
        showStatus(`üëÅÔ∏è ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤: ${blinkCount}/3${blinkCount >= 3 ? ' ‚úÖ' : ''}, ü§∏ ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏®‡∏µ‡∏£‡∏©‡∏∞: ${headMovements}/2${headMovements >= 2 ? ' ‚úÖ' : ''}, üòä ‡∏¢‡∏¥‡πâ‡∏°: ${smileDetected ? '‚úì ‚úÖ' : '‚úó'}`, '');
        
        console.log('Updated Counts:', { blinkCount, headMovements, smileDetected });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (blinkCount >= 3 && headMovements >= 2 && smileDetected) {
          console.log('üéâ ALL REQUIREMENTS MET! Liveness check passed!');
          isLivenessCheckPassed = true;
          clearInterval(checkInterval);
          showStatus('üéâ ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Liveness ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!', 'success');
          verifyBtn.disabled = false;
          startLivenessBtn.disabled = true;
        }
      } else {
        console.log('‚ùå No face detected');
        showStatus('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'error');
      }
    } catch (error) {
      console.error('Error in liveness check:', error);
    }
  }, 100);
  
  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  setTimeout(() => {
    if (!isLivenessCheckPassed) {
      clearInterval(checkInterval);
      showStatus('‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Liveness (‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤)', 'error');
    }
  }, 30000);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏° Liveness Check
if (startLivenessBtn) {
  startLivenessBtn.onclick = startLivenessCheck;
}

verifyBtn.onclick = async () => {
  if (!isLivenessCheckPassed) {
    showStatus('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Liveness ‡∏Å‡πà‡∏≠‡∏ô', 'error');
    return;
  }
  
  const studentId = document.getElementById('studentId').value;
  const firstName = document.getElementById('firstName').value;
  const lastName = document.getElementById('lastName').value;
  
  if (!studentId || !firstName || !lastName) {
    showStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö', 'error');
    return;
  }
  
  showStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤...', '');
  const detection = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
    .withFaceLandmarks()
    .withFaceDescriptor();
    
  if (!detection) {
    showStatus('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'error');
    return;
  }
  
  // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏ô overlay
  const ctx = overlay.getContext('2d');
  ctx.clearRect(0, 0, overlay.width, overlay.height);
  const { box } = detection.detection;
  ctx.strokeStyle = '#00ff00';
  ctx.lineWidth = 2;
  ctx.strokeRect(box.x, box.y, box.width, box.height);

  // ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
  canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
  const imageData = canvas.toDataURL('image/jpeg');
  const faceDescriptor = detection.descriptor ? Array.from(detection.descriptor) : null;
  
  if (!imageData || !faceDescriptor) {
    showStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤', 'error');
    return;
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ backend
  showStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô...', '');
  try {
    const res = await fetch('http://localhost:3000/verify', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        studentId,
        firstName,
        lastName,
        image: imageData,
        faceDescriptor
      })
    });
    const data = await res.json();
    if (data.success) {
      showStatus(`‚úÖ ${data.message} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${data.confidence}%, ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á: ${data.distance})`, 'success');
    } else {
      showStatus(`‚ùå ${data.message} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${data.confidence}%, ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á: ${data.distance})`, 'error');
    }
  } catch (e) {
    showStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'error');
  }
};

window.onload = async () => {
  await loadModels();
  showStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Liveness"', 'success');
  verifyBtn.disabled = true;
  if (startLivenessBtn) {
    startLivenessBtn.disabled = false;
  }
}; 